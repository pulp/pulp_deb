# Generated by Django 3.2.18 on 2023-04-03 13:18; extended manually!
#
# IMPORTANT: This migration works in both directions, however if you alter your repository versions
# between applying and unapplying the migration, there may be rare cases, where it cannot guarantee
# for the consistency of your existing repository versions. Affected repos may need to be re-synced
# or otherwise fixed before they can be published once more.

from django.db import migrations, models
import django.db.models.deletion

BATCH_SIZE=100


def move_structure_info(apps, schema_editor):
    ReleaseArchitecture = apps.get_model('deb', 'ReleaseArchitecture')
    ReleaseComponent = apps.get_model('deb', 'ReleaseComponent')

    move_structure_info_for_model(ReleaseArchitecture)
    move_structure_info_for_model(ReleaseComponent)

def move_structure_info_for_model(model):
    content_to_update = []
    for content in model.objects.iterator(chunk_size=BATCH_SIZE):
        content.codename = content.release.codename
        content.distribution = content.release.distribution
        content.suite = content.release.suite
        content_to_update.append(content)
        if len(content_to_update) == BATCH_SIZE:
            model.objects.bulk_update(content_to_update, ["codename", "distribution", "suite"])
            content_to_update.clear()

    # Update remaining content_to_update
    if len(content_to_update) > 0:
        model.objects.bulk_update(content_to_update, ["codename", "distribution", "suite"])


def reassociate_with_release(apps, schema_editor):
    Release = apps.get_model('deb', 'Release')
    ReleaseArchitecture = apps.get_model('deb', 'ReleaseArchitecture')
    ReleaseComponent = apps.get_model('deb', 'ReleaseComponent')

    reassociate_with_release_for_model(Release, ReleaseArchitecture)
    reassociate_with_release_for_model(Release, ReleaseComponent)

def reassociate_with_release_for_model(release_model, model_to_associate):
    content_to_update = []
    for content in model_to_associate.objects.iterator(chunk_size=BATCH_SIZE):
        try:
            release = release_model.objects.get(
                codename=content.codename,
                distribution=content.distribution,
                suite=content.suite,
            )
        except release_model.DoesNotExist:
            # We do not batch for this rare edge case!
            release = Release.objects.create(
                pulp_type='deb.release',
                codename=content.codename,
                distribution=content.distribution,
                suite=content.suite,
            )

        content.release = release
        content_to_update.append(content)
        if len(content_to_update) == BATCH_SIZE:
            model_to_associate.objects.bulk_update(content_to_update, ["release"])
            content_to_update.clear()

    # Update remaining content_to_update
    if len(content_to_update) > 0:
        model_to_associate.objects.bulk_update(content_to_update, ["release"])


class Migration(migrations.Migration):

    dependencies = [
        ('deb', '0020_remove_fk_relations_in_packageindex_and_installerfileindex'),
    ]

    operations = [
        # Turn off the unique constraints temporarily, they will get re-created in migration 0025
        migrations.AlterUniqueTogether(
            name='releasearchitecture',
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name='releasecomponent',
            unique_together=set(),
        ),
        migrations.AddField(
            model_name='releasearchitecture',
            name='codename',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='releasearchitecture',
            name='distribution',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='releasearchitecture',
            name='suite',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='releasecomponent',
            name='codename',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='releasecomponent',
            name='distribution',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='releasecomponent',
            name='suite',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.RunPython(move_structure_info, reverse_code=migrations.RunPython.noop, elidable=True),
        migrations.RunSQL(
            sql="SET CONSTRAINTS ALL IMMEDIATE;",
            reverse_sql="",
        ),
        migrations.AlterField(
            model_name='releasearchitecture',
            name='release',
            field=models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, related_name='deb_releasearchitecture', to='deb.Release', default=None, null=True),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='releasecomponent',
            name='release',
            field=models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, related_name='deb_releasecomponent', to='deb.Release', default=None, null=True),
            preserve_default=False,
        ),
        migrations.RunSQL(
            sql="",
            reverse_sql="SET CONSTRAINTS ALL IMMEDIATE;",
        ),
        migrations.RunPython(migrations.RunPython.noop, reverse_code=reassociate_with_release, elidable=True),
        migrations.RemoveField(
            model_name='releasearchitecture',
            name='release',
        ),
        migrations.RemoveField(
            model_name='releasecomponent',
            name='release',
        ),
    ]
