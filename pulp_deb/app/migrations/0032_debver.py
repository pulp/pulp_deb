# Generated by Django 4.2.24 on 2025-09-10 07:38

from django.db import migrations
import pulp_deb.fields


class Migration(migrations.Migration):

    dependencies = [
        ("deb", "0031_add_domains"),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
            CREATE COLLATION debver (provider='ICU', deterministic=false, locale='und', rules=$$
              [reorder digit latn symbol punct others][numericOrdering on]
              &[first variable]<'~'<'\\u0000'
            $$);

            CREATE TYPE debver AS
            (
              sort_key TEXT COLLATE debver,
              value TEXT
            );

            CREATE FUNCTION debver(value bpchar) RETURNS debver
            AS $$
            DECLARE
              pos integer;
              rest bpchar;
              epoch bpchar;
              version bpchar;
              revision bpchar;
            BEGIN
              pos := position(':' IN value);
              IF pos > 0
              THEN
                epoch := left(value, pos - 1);
                rest := right(value, -pos);
              ELSE
                epoch := '0';
                rest := value;
              END IF;
              pos := position('-' IN reverse(rest));
              IF pos > 0
              THEN
                version := left(rest, -pos);
                revision := right(rest, pos -1);
              ELSE
                version := rest;
                revision := '';
              END IF;
              return (epoch || '\\ufffd' || version || '\\u0000\\ufffd' || revision || '\\u0000', value)::debver;
            END;
            $$
            LANGUAGE plpgsql
            IMMUTABLE
            RETURNS NULL ON NULL INPUT;

            CREATE FUNCTION text(version debver) RETURNS text
            AS $$
            BEGIN
              RETURN version.value;
            END;
            $$
            LANGUAGE plpgsql
            IMMUTABLE
            RETURNS NULL ON NULL INPUT;

            CREATE CAST (text AS debver) WITH FUNCTION debver(bpchar) AS IMPLICIT;
            CREATE CAST (varchar AS debver) WITH FUNCTION debver(bpchar) AS IMPLICIT;
            CREATE CAST (bpchar AS debver) WITH FUNCTION debver(bpchar) AS IMPLICIT;
            CREATE CAST (debver AS text) WITH FUNCTION text(debver) AS IMPLICIT;
            CREATE CAST (debver AS varchar) WITH FUNCTION text(debver) AS IMPLICIT;
            CREATE CAST (debver AS bpchar) WITH FUNCTION text(debver) AS IMPLICIT;

            CREATE FUNCTION debver_eq(a debver, b debver) RETURNS boolean
            LANGUAGE sql
            IMMUTABLE
            RETURNS NULL ON NULL INPUT
            RETURN a.sort_key = b.sort_key;

            CREATE FUNCTION debver_neq(a debver, b debver) RETURNS boolean
            LANGUAGE sql
            IMMUTABLE
            RETURNS NULL ON NULL INPUT
            RETURN a.sort_key <> b.sort_key;

            CREATE FUNCTION debver_lt(a debver, b debver) RETURNS boolean
            LANGUAGE sql
            IMMUTABLE
            RETURNS NULL ON NULL INPUT
            RETURN a.sort_key < b.sort_key;

            CREATE FUNCTION debver_lte(a debver, b debver) RETURNS boolean
            LANGUAGE sql
            IMMUTABLE
            RETURNS NULL ON NULL INPUT
            RETURN a.sort_key <= b.sort_key;

            CREATE FUNCTION debver_gte(a debver, b debver) RETURNS boolean
            LANGUAGE sql
            IMMUTABLE
            RETURNS NULL ON NULL INPUT
            RETURN a.sort_key >= b.sort_key;

            CREATE FUNCTION debver_gt(a debver, b debver) RETURNS boolean
            LANGUAGE sql
            IMMUTABLE
            RETURNS NULL ON NULL INPUT
            RETURN a.sort_key > b.sort_key;

            CREATE OPERATOR = (
              LEFTARG = debver,
              RIGHTARG = debver,
              FUNCTION = debver_eq
            );

            CREATE OPERATOR <> (
              LEFTARG = debver,
              RIGHTARG = debver,
              FUNCTION = debver_neq
            );

            CREATE OPERATOR < (
              LEFTARG = debver,
              RIGHTARG = debver,
              FUNCTION = debver_lt
            );

            CREATE OPERATOR <= (
              LEFTARG = debver,
              RIGHTARG = debver,
              FUNCTION = debver_lte
            );

            CREATE OPERATOR >= (
              LEFTARG = debver,
              RIGHTARG = debver,
              FUNCTION = debver_gte
            );

            CREATE OPERATOR > (
              LEFTARG = debver,
              RIGHTARG = debver,
              FUNCTION = debver_gt
            );
            """,
            reverse_sql="""
            DROP TYPE IF EXISTS debver CASCADE;
            DROP COLLATION IF EXISTS debver;
            """,
        ),
        migrations.AlterField(
            model_name="installerpackage",
            name="version",
            field=pulp_deb.fields.DebVersionField(),
        ),
        migrations.AlterField(
            model_name="package",
            name="version",
            field=pulp_deb.fields.DebVersionField(),
        ),
    ]
